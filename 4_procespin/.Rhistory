# Kernel density plot
plot(d, lwd = 1, main = "Default kernel density plot")
lines(density(rexp(n, alpha)), lw=2, col="red")
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, main = "Default kernel density plot")
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="green",
main = "Default kernel density plot")
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="darkseagreen",
main = "Default kernel density plot")
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = "Default kernel density plot")
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = "Default kernel density plot")
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
legend("topright", legend = c("Simulation", "Exponential(alpha)"),
lwd = 3, col = c("blue", "red"))
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Distribution of Tau_1^,", delta_sequence[i],
"\nvs. Exponential(alpha=,", alpha, ")"))
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
legend("topright", legend = c("Simulation", "Exp(alpha)"),
lwd = 3, col = c("blue", "red"))
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Distribution of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exponential(alpha=", alpha, ")"))
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
legend("topright", legend = c("Simulation", "Exp(alpha)"),
lwd = 3, col = c("blue", "red"))
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Distribution of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exponential(alpha=", alpha, ")"))
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
legend("topright", legend = c("Markov process sim.", paste("Exp(", alpha, ")")),
lwd = 3, col = c("blue", "red"))
}
knitr::opts_chunk$set(echo = TRUE)
generate_params <- function(n, t, print_probas=T){
# Generates a list of jump probabilities from state 0 to 1,
# and vice-versa, plus all required parameters to simulate
# subsequent Markov chains.
params = list("init"=0,"n"=n,"t"=t,
"p0to1"=round(runif(1,0,1),2),
"p1to0"=round(runif(1,0,1),2))
if (print_probas) {
cat("Probability jump 0 -> 1:", params$p0to1,"\n")
cat("Probability jump 1 -> 0:", params$p1to0)
}
params
}
generate_params(n = 10, t = 20)
simulation_v1_iterative <- function(params) {
# Initializes a matrix to the init value found in the variable params
# rows = time steps, columns = unique markov chain
chains = matrix(params$init, nrow=params$t,   ncol=params$n)
# Declares a function that performs a check condition (i.e. to
# determine whether to jump state or not)
switch <- function(prob) {runif(1,0,1)<=prob}
# Iterates over the matrix, updating when needed
for (row in seq(2,params$t,1)) {
for (col in seq(1,params$n,1)){
if (chains[row-1,col]==0 && switch(params$p0to1)) {
# If value @ t-1 is 0 & p0to1 switch is True,
# push next matrix entry to 1
chains[row,col]=1
} else if (chains[row-1,col]==1 && switch(params$p1to0)) {
# If value @ t-1 is 1 & p1to0 switch is True,
# push next matrix entry to 0
chains[row,col]=0
} else {
# Else, duplicates value from t-1
chains[row,col]=chains[row-1,col]
}
}
}
chains
}
simulation_v2_bernoulli_seqs <- function(params) {
# Initializes a matrix to the init value found in the variable params
# rows = time steps, columns = unique markov chain
chains = matrix(params$init, nrow=params$t,   ncol=params$n)
# Declares a function to more explicitly state that
# a sequence of bernoulli values from 0 to 1 are
# generated
generate_bernoulli_seq <- function(p,n) {rbinom(n, 1, p)}
# Iterates over the matrix, updating when needed
for (col in seq(1,params$n,1)) {
# Generates two sequences Y and Z
# we only need t-1 draws as we only update <chains>
# starting at the index 2
Y = generate_bernoulli_seq(params$p0to1, params$t-1)
Z = generate_bernoulli_seq(params$p1to0, params$t-1)
for (row in seq(1,params$t-1,1)) {
chains[row+1, col] = chains[row,col]*(1-Z[row]) +
(1-chains[row,col])*Y[row]
}
}
chains
}
params = generate_params(n=1000, t=10000)
system.time(simulation_v1_iterative(params))
system.time(simulation_v2_bernoulli_seqs(params))
par(mfrow=c(2,2))
for (i in 1:4){
# Generates a new Markov chain
params = generate_params(n=1, t=25, print_probas=F)
markov_chain = simulation_v2_bernoulli_seqs(params)
# Plots the Markov chain
title = paste("Generated Markov Chain n'", i,
"\np_0to1=", params$p0to1,
"; p_1to0=", params$p1to0)
plot(markov_chain, type="l",
main=title, xlab="Timesteps", ylab="Value (either 0 or 1)")
}
generate_MP_params <- function(n, t, a, b, d) {
# Generates a list of probability of jumping from
# state 0 to 1, and vice-versa
# args:   n -> the number of chains to generate
#         t -> the length of each chain
params = list("init"=0,"n"=n,"t"=t,
"alpha"=a,"beta"=b,"delta"=d,
"p0to1"=a*d, "p1to0"=b*d)
params
}
alpha = 5
beta = 10
delta = 0.01
n = 1000
t = 5000
MP_params = generate_MP_params(n, t, alpha, beta, delta)
Yn_simulations = simulation_v2_bernoulli_seqs(MP_params)
par(mfrow=c(2,2))
for (i in 1:4){
plot(Yn_simulations[1:500,i], type="l",
main=paste("First 500 steps of Markov Chain n'", i,
"\nwith alpha=5, beta=10, delta=0.01"),
xlab="timesteps", ylab="value (either 0 or 1)")
}
fetch_indexes <- function(Yn, d) {
# Retrieves the first index where
fetch_idx_one_simulation <- function(x){
(c(which(x==1))[1]-1)*d # note the multiplication by d
# we need to rescale d as it is a frequency acquisition
# parameter. It comes handy for comparing distribution
# with different d parameters afterwards
}
apply(Yn,2,fetch_idx_one_simulation)
}
t1_simulation = fetch_indexes(Yn_simulations, delta)
# Kernel density estimation
d <- density(t1_simulation)
# Kernel density plot
plot(d, lwd = 2,
main = paste("Distribution of Tau_1^delta\n",
"Given delta=", delta))
# Declares variables
n = 5000
t = 10000 # a lower t leads to a NA for delta=1e-4
alpha = 5
beta = 10
delta_sequence = as.matrix(c(1e-1,5e-2,1e-2,5e-3,1e-3,5e-4))
mapper <- function(n, t, a, b, d) {
#
fetch_indexes(
simulation_v2_bernoulli_seqs(
generate_MP_params(n, t, a, b, d)), d)
}
t1_simulations = apply(delta_sequence, 1, function(x) {mapper(n,t,alpha,beta,x)})
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Distribution of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exponential(alpha=", alpha, ")"))
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
legend("topright", legend = c("Markov process sim.", paste("Exp(", alpha, ")")),
lwd = 3, col = c("blue", "red"))
}
par(mfrow=c(2,3))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(density(rexp(n, alpha)), lw=2, lty=3, col="red")
legend("topright", legend = c("Markov proc. sim.", paste("Exp(", alpha, ")")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.1, 0.1, 0.1, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(1, 0.1, 0.1, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.1, 0.1, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 1, 0.1, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.1, 1, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.1, 0.2, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.1, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.1, 0.3, 0.2))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.2, 0.3, 0.2))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.2, 0.3, 0.2))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
**RESULTS** --
```{r density_comparison_different_deltas, out.width="100%"}
exponential_distribution = density(rexp(n, alpha))
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.25, 0.3, 0.2))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.25, 0.25, 0.2))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.5, 0.25, 0.3, 0.15))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.9, 0.25, 0.3, 0.15))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.25, 0.3, 0.15))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.25, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.5, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.25, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")"),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
?paste
View(predicted_Y1)
?paste
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.25, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")", collapse=""),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.25, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta =", delta_sequence[i],
"\nvs. Exp(alpha =", alpha, ")", sep=""),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
exponential_distribution = density(rexp(n, alpha))
par(mfrow=c(2,3), mai = c(0.4, 0.25, 0.3, 0.1))
for (i in 1:6){
d <- density(t1_simulations[,i])
# Kernel density plot
plot(d, lwd = 1, col="blue",
main = paste("Dist. of Tau_1 with delta=", delta_sequence[i],
"\nvs. Exp(alpha=", alpha, ")", sep=""),
xlab="", ylab="")
lines(exponential_distribution, lw=2, lty=3, col="red")
legend("topright", legend = c("Tau_1 dist.", paste("Exp(", alpha, ") dist.")),
lwd = 3, col = c("blue", "red"))
}
